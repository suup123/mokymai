(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{511:function(a,t,s){"use strict";s.r(t);var i=s(14),n=Object(i.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"funkcijos"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#funkcijos"}},[a._v("#")]),a._v(" Funkcijos")]),a._v(" "),t("h2",{attrs:{id:"vaizdo-pamoka"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vaizdo-pamoka"}},[a._v("#")]),a._v(" Vaizdo pamoka")]),a._v(" "),t("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/bzeN4Ina01I?start=432&end=2286",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),a._v(" "),t("h2",{attrs:{id:"apie-funkcijas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apie-funkcijas"}},[a._v("#")]),a._v(" Apie funkcijas")]),a._v(" "),t("p",[a._v("Labai paprastai tariant funkcija (arba metodas) yra tam tikrų veiksmų rinkinys, skirtas konkrečios užduoties atlikimui.")]),a._v(" "),t("p",[a._v("Keletas pagrindinių minčių:")]),a._v(" "),t("ul",[t("li",[a._v("Funkcija apjungia tam tikros užduoties kodą į vieną vietą. Tai padeda turėti tvarkingesnį kodą.")]),a._v(" "),t("li",[a._v("Funkcija turėtų atlikti vieną užduotį. Tai gali būti sumos skaičiavimas, duomenų nuskaitymas iš failo, duomenų išvedimas į konsolę iš masyvo, vidurkio skaičiavimas, duomenų filtravimui ir pan.")]),a._v(" "),t("li",[a._v("Funkciją galima kviesti daug kartų. Todėl vieną kartą užrašius algoritmą ir funkcijai duodant skirtingus duomenis, ji atliks tą pačią užduotį, bet kiekvieną kartą su reikiamais duomenimis.")]),a._v(" "),t("li",[a._v("Funkcija mato tik tuos duomenis (kintamuosius), kurie yra sukurti joje arba kurie yra perduodami jos iškvietimo metu.")])]),a._v(" "),t("h2",{attrs:{id:"funkciju-sintakse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#funkciju-sintakse"}},[a._v("#")]),a._v(" Funkcijų sintaksė")]),a._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("tipas"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pavadinimas"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("argumentai "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" parametrai"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("kodas"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("reiksme"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// jei metodo tipas yra ne void")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("ul",[t("li",[t("strong",[a._v("tipas")]),a._v(" - kokio (duomenų) tipo atsakymą funkciją grąžins. Jeigu funkcijos užduotis surasti sumą, tai atsakymas pavyzdžiui gali būti "),t("code",[a._v("int")]),a._v(" ar "),t("code",[a._v("double")]),a._v(" tipo, nes jei suma bus skaičiuojama iš "),t("code",[a._v("int")]),a._v(" tipo skaičių, tai ir atsakymas bus "),t("code",[a._v("int")]),a._v(", jei iš "),t("code",[a._v("double")]),a._v(", tai bus "),t("code",[a._v("double")]),a._v(". Jeigu funkcija ieškos vidurkio, tuomet atsakymas greičiausiai bus "),t("code",[a._v("double")]),a._v(" tipo. Jeigu funkcija turės sugeneruoti kažkokią tekstinę eilutę, tai atsakymas tikriausiai bus "),t("code",[a._v("string")]),a._v(". Ir t. t. Jeigu funkcija neturi grąžinti jokių duomenų kaip atsakymo, t. y. jeigu funkcija neturi grąžinti jokio atsakymo, o tik atlikti darbą, tuomet jos tipa bus "),t("code",[a._v("void")]),a._v(", kuris reiškia, kad funkcija tik atlieka darbą ir negrąžina jokio atsakymo. O jeigu funkcija yra "),t("code",[a._v("void")]),a._v(", tuomet "),t("code",[a._v("return")]),a._v(" eilutė nebesirašo.")]),a._v(" "),t("li",[t("strong",[a._v("pavadinimas")]),a._v(" - funkcijos pavadinimas. Taikomos tokios pačios taisyklės kaip ir kintamųjų pavadinimams. Šis pavadinimas naudojamas norint iškviesti funkciją. Pavadinime turėtų atsispindėti kokią užduotį sprendžia funkcija. Pavyzdžiui: įvedimas, išvedimas, suma, vidurkis, filtravimas, ...")]),a._v(" "),t("li",[t("strong",[a._v("argumentai / parametrai")]),a._v(" - papildomi duomenys, kurie reikalingi funkcijos darbui bei kuriuos gauna funkcija.")]),a._v(" "),t("li",[t("strong",[a._v("kodas")]),a._v(" - kodas (ar veiksmų rinkinys), kurį atlieka funkcija užduoties įgyvendinimui.")]),a._v(" "),t("li",[t("strong",[a._v("return")]),a._v(" ir "),t("strong",[a._v("reiksme")]),a._v(" - glaudžiai susijusi su "),t("code",[a._v("<tipas>")]),a._v(" dalimi, šioje vietoje yra grąžinamas atsakymas, tokio tipo, koks nurodytas "),t("code",[a._v("<tipas>")]),a._v(" dalyje. Pavyzdžiui, jeigu "),t("code",[a._v("<tipas>")]),a._v(" dalyje buvo nurodyta, kad ši funkcija turi grąžinti "),t("code",[a._v("int")]),a._v(" tipo atsakymą, tuomet "),t("code",[a._v("return")]),a._v(" dalyje turi būti grąžinta reikšmė arba kintamasis, kuris yra "),t("code",[a._v("int")]),a._v(" tipo. Kai "),t("code",[a._v("<tipas>")]),a._v(" yra "),t("code",[a._v("void")]),a._v(", tuomet ši return dalis išvis nesirašo.")])]),a._v(" "),t("h2",{attrs:{id:"funkcijos-aprasymas-ir-iskvietimas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#funkcijos-aprasymas-ir-iskvietimas"}},[a._v("#")]),a._v(" Funkcijos aprašymas ir iškvietimas")]),a._v(" "),t("p",[a._v("Funkcijas aprašyti ir iškviesti galima taip:")]),a._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[a._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iostream>")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("using")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" std"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("funkcija")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// programa informuojama apie funkcijos egzistavimą")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("funkcija")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// funkcija iškviečiama")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("funkcija")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// aprašoma funkcija")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// funkcijos kodas")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("Arba galima ir taip:")]),a._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[a._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iostream>")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("using")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" std"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("funkcija")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// aprašoma funkcija")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// funkcijos kodas")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("funkcija")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// funkcija iškviečiama")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);